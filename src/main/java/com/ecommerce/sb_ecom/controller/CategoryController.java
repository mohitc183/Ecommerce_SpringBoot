package com.ecommerce.sb_ecom.controller;

import com.ecommerce.sb_ecom.config.AppConstants;
import com.ecommerce.sb_ecom.payload.CategoryDTO;
import com.ecommerce.sb_ecom.payload.CategoryResponse;
import com.ecommerce.sb_ecom.service.CategoryService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path = "/api")
//@RequestMapping(path = "/api")
public class CategoryController {


    private CategoryService categoryService;

    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }


    @GetMapping(path = "/public/categories")
    public ResponseEntity<CategoryResponse> getAllCategories(
                    @RequestParam(name = "pageNumber", defaultValue = AppConstants.PAGE_NUMBER, required = false) Integer pageNumber,
                    @RequestParam(name = "pageSize", defaultValue = AppConstants.PAGE_SIZE, required = false) Integer pageSize
    ){

        CategoryResponse categoryResponse = categoryService.getAllCategories(pageNumber, pageSize);
        return new ResponseEntity<>(categoryResponse, HttpStatus.OK);

    }


    @PostMapping(path = "/public/categories")
    //@Valid is used here to send a more user-friendly exceptions if blank category name is sent
    //error response is generated by spring's default error handling mechanism we can have custom msgs as well
    //@Valid will check the incoming parameter according to the checks provided in the Model
    public ResponseEntity<CategoryDTO> createCategory(@Valid @RequestBody CategoryDTO categoryDTO){

        CategoryDTO savedCategoryDTO = categoryService.createCategory(categoryDTO);

        return new ResponseEntity<>(savedCategoryDTO, HttpStatus.CREATED);

    }


    @DeleteMapping(path = "/admin/categories/{categoryId}")
    public ResponseEntity deleteCategory(@PathVariable Long categoryId){

        CategoryDTO deletedCategory = categoryService.deleteCategory(categoryId);
        return new ResponseEntity(deletedCategory, HttpStatus.OK);
    }


    @PutMapping(path = "/public/categories/{categoryId}")
    public ResponseEntity<CategoryDTO> updateCategory(@Valid @RequestBody CategoryDTO categoryDTO,
                                                 @PathVariable Long categoryId){

        CategoryDTO savedCategory = categoryService.updateCategory(categoryDTO, categoryId);
        return new ResponseEntity(savedCategory, HttpStatus.OK);

    }
}

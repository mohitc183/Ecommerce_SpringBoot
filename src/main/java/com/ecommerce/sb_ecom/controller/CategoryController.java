package com.ecommerce.sb_ecom.controller;

import com.ecommerce.sb_ecom.model.Category;
import com.ecommerce.sb_ecom.service.CategoryService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@RestController
@RequestMapping(path = "/api")
//@RequestMapping(path = "/api")
public class CategoryController {


    private CategoryService categoryService;

    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }

    @GetMapping(path = "/public/categories")
    public ResponseEntity<List<Category>> getAllCategories(){
        List categgories = categoryService.getAllCategories();
        return new ResponseEntity<>(categgories, HttpStatus.OK);
    }

    @PostMapping(path = "/public/categories")
    //@Valid is used here to send a more user-friendly exceptions if blank category name is sent
    //error response is generated by spring's default error handling mechanism we can have custom msgs as well
    //@Valid will check the incoming parameter according to the checks provided in the Model
    public ResponseEntity<String> createCategory(@Valid @RequestBody Category category){
        categoryService.createCategory(category);
        return new ResponseEntity<>("Category added", HttpStatus.CREATED);
    }

    @DeleteMapping(path = "/admin/categories/{categoryId}")
    public ResponseEntity deleteCategory(@PathVariable Long categoryId){

        String status = categoryService.deleteCategory(categoryId);
        return new ResponseEntity(status, HttpStatus.OK);
    }

    @PutMapping(path = "/public/categories/{categoryId}")
    public ResponseEntity<String> updateCategory(@Valid @RequestBody Category category,

                                                 @PathVariable Long categoryId){

        Category savedCategory = categoryService.updateCategory(category, categoryId);
        return new ResponseEntity("Category with id "+ categoryId + " updated!!", HttpStatus.OK);

    }
}
